new_post("Madrid")
new_post <- function(
title,
file = "index.qmd",
description = "",
author = "Matt Bixley",
date = Sys.Date(),
categories = "",
draft = FALSE,
title_limit = 40,
open_file = TRUE
){
# convert to kebab case and remove non space or alphanumeric characters
title_kebab <- stringr::str_to_lower(title) |>
stringr::str_remove_all("[^[:alnum:][:space:]]") |>
stringr::str_replace_all(" ", "-")
# warn if a very long slug
if(nchar(title_kebab) >= title_limit){
cli::cli_alert_warning("Warning: Title slug is longer than {.val {title_limit}} characters!")
}
# generate the slug as draft, prefix with _ which prevents
# quarto from rendering/recognizing the folder
if(draft){
slug <- glue::glue("posts/_{date}-{title_kebab}")
cli::cli_alert_info("Appending a '_' to folder name to avoid render while a draft, remove '_' when finished.")
} else {
slug <- glue::glue("posts/{date}-{title_kebab}")
}
# create and alert about directory
fs::dir_create(
path = slug
)
cli::cli_alert_success("Folder created at {.file {slug}}")
# wrap description at 77 characters
description <- stringr::str_wrap(description, width = 77) |>
stringr::str_replace_all("[\n]", "\n  ")
# start generating file
new_post_file <- glue::glue("{slug}/{file}")
# build yaml core
new_post_core <- c(
"---",
glue::glue('title: "{title}"'),
"description: |",
glue::glue('  {description}'),
glue::glue("author: {author}"),
glue::glue("date: {date}"),
"categories: |",
glue::glue('  {categories}')
)
# add draft if draft
if(draft){
new_post_text <- c(
new_post_core,
"draft: true",
"---\n"
)
} else {
new_post_text <- c(
new_post_core,
"---\n"
)
}
# finalize new post text
new_post_text <- paste0(
new_post_text,
collapse = "\n"
)
# create file and alert
fs::file_create(new_post_file)
cli::cli_alert_success("File created at {.file {new_post_file}}")
# print new post information
cat(new_post_text)
if(yesno::yesno2("Are you ready to write that to disk?")){
writeLines(
text = new_post_text,
con = new_post_file
)
rstudioapi::documentOpen(new_post_file, line = length(new_post_text))
}
}
new_post("Madrid")
new_post("World Rogaine Championships")
new_post("Girona - Week 1")
# Construct data frame
df_B <- data.frame(
a = 1:5,
b = 5:9
c = a * b
# Construct data frame
df_B <- data.frame(
a = 1:5,
b = 5:9,
c = a * b
)
# Construct data frame
df_B <- data.frame(
a = 1:5,
b = 5:9,
c = a * b
)
# Construct tibble
tbl_B <- tibble(
a = 1:5,
b = 5:9,
c = a * b
)
library(tidyverse)
if (n > 1) {
n * calc_factorial(n - 1)
} else {
1
}
calc_factorial <- function(n) {
if (n > 1) {
n * calc_factorial(n - 1)
} else {
1
}
}
# Test that it works
calc_factorial(4)
prod(1, 2, 3, 4)
collatz <- function(n) {
# Output
PATH <- numeric(10)
# Initiate index
i <- 1
# Expand output stepwise
if (i == length(PATH)) {
PATH <- c(PATH, numeric(10))
}
# Exit
if (n == 1) return(0)
# Test
while (n != 1) {
n <- if_else(n %% 2 == 0, n / 2, (3 * n) + 1)
PATH[i] <- n
i <- i + 1
}
PATH[PATH > 0]
}
# Solutions for numbers 2 to anything
test <- 10
collatz_res <- vector(mode = "list", length = test - 1)
for (numbers in 2:test) {
collatz_res[[numbers - 1]] <- collatz(numbers)
names(collatz_res)[numbers - 1] <- numbers
}
install.packages("tidyverse")
collatz <- function(n) {
# Output
PATH <- numeric(10)
# Initiate index
i <- 1
# Expand output stepwise
if (i == length(PATH)) {
PATH <- c(PATH, numeric(10))
}
# Exit
if (n == 1) return(0)
# Test
while (n != 1) {
n <- if_else(n %% 2 == 0, n / 2, (3 * n) + 1)
PATH[i] <- n
i <- i + 1
}
PATH[PATH > 0]
}
# Solutions for numbers 2 to anything
test <- 10
collatz_res <- vector(mode = "list", length = test - 1)
for (numbers in 2:test) {
collatz_res[[numbers - 1]] <- collatz(numbers)
names(collatz_res)[numbers - 1] <- numbers
}
library(tidyverse)
collatz <- function(n) {
# Output
PATH <- numeric(10)
# Initiate index
i <- 1
# Expand output stepwise
if (i == length(PATH)) {
PATH <- c(PATH, numeric(10))
}
# Exit
if (n == 1) return(0)
# Test
while (n != 1) {
n <- if_else(n %% 2 == 0, n / 2, (3 * n) + 1)
PATH[i] <- n
i <- i + 1
}
PATH[PATH > 0]
}
# Solutions for numbers 2 to anything
test <- 10
collatz_res <- vector(mode = "list", length = test - 1)
for (numbers in 2:test) {
collatz_res[[numbers - 1]] <- collatz(numbers)
names(collatz_res)[numbers - 1] <- numbers
}
collatz_res
collatz <- function(n) {
# Output
PATH <- numeric(n)
# Initiate index
i <- 1
# Expand output stepwise
if (i == length(PATH)) {
PATH <- c(PATH, numeric(n))
}
# Exit
if (n == 1) return(0)
# Test
while (n != 1) {
n <- if_else(n %% 2 == 0, n / 2, (3 * n) + 1)
PATH[i] <- n
i <- i + 1
}
PATH[PATH > 0]
}
# Solutions for numbers 2 to anything
test <- 10
collatz_res <- vector(mode = "list", length = test - 1)
for (numbers in 2:test) {
collatz_res[[numbers - 1]] <- collatz(numbers)
names(collatz_res)[numbers - 1] <- numbers
}
collatz_res
# Solutions for numbers 2 to anything
test <- 20
collatz_res <- vector(mode = "list", length = test - 1)
for (numbers in 2:test) {
collatz_res[[numbers - 1]] <- collatz(numbers)
names(collatz_res)[numbers - 1] <- numbers
}
collatz_res
# Solutions for numbers 2 to anything
test <- 100
collatz_res <- vector(mode = "list", length = test - 1)
for (numbers in 2:test) {
collatz_res[[numbers - 1]] <- collatz(numbers)
names(collatz_res)[numbers - 1] <- numbers
}
collatz_res
# Something to iterate
b <- list(
some_characters = fruit[1:10],
some_logical = sample(c(TRUE, FALSE), 10, replace = TRUE),
some_integers = rpois(10, 2),
some_doubles = rcauchy(10)
)
b
map(b, \(x) paste(x, collapse = " "))
length(b)
for (i in 1:length(b)){
paste(b[i], collapse = " ")
}
print(paste(b[i], collapse = " "))
i
b
print(paste(b[[i]], collapse = " "))
map_int(b, \(x) paste(x, collapse = " "))
map_dbl(b, \(x) paste(x, collapse = " "))
map(b, \(x) paste(x, collapse = " "))
example_pmap <- pmap_dbl(
list(asv$AS1A1, asv$AS1A2, asv$AS1A3),
\(a, b, c) {
values <- c(a, b, c)
sd(values) / mean(values)
}
)
str(example_pmap)
asv <- read.delim("https://raw.githubusercontent.com/GenomicsAotearoa/Intermediate-R/main/tables/asv_table.tsv")
env <- read.delim("https://raw.githubusercontent.com/GenomicsAotearoa/Intermediate-R/main/tables/env_table.tsv")
tax <- read.delim("https://raw.githubusercontent.com/GenomicsAotearoa/Intermediate-R/main/tables/taxonomy.tsv")
example_pmap <- pmap_dbl(
list(asv$AS1A1, asv$AS1A2, asv$AS1A3),
\(a, b, c) {
values <- c(a, b, c)
sd(values) / mean(values)
}
)
str(example_pmap)
fn_glue <- \(x, nm) {
str_glue("Vector named {nm} is a {class(x)}")
}
map2(b, names(b), \(x, nm) cat(fn_glue(x, nm), "\n"))
walk2(b, names(b), \(x, nm) cat(fn_glue(x, nm), "\n"))
map2(b, names(b), \(x, nm) cat(fn_glue(x, nm), "\n"))
# Load required libraries
library(ggplot2)
library(Manu)
# install.packages("devtools")
devtools::install_github("G-Thomson/Manu")
install.packages("devtools")
devtools::install_github("G-Thomson/Manu")
library(Manu)
# Create the data frame
latency_data <- data.frame(
Host = rep(c("gpu-0", "compute-0"), each = 3),
Metric = rep(c("Min", "Avg", "Max"), times = 2),
Latency = c(0.06, 0.07, 1.14, 0.07, 0.16, 0.37)
)
# Choose a Manu palette
manu_cols <- get_pal("Hoiho")[1:3]  # Select first 3 colours for Min, Avg, Max
# Plot using ggplot2 and Manu colours
ggplot(latency_data, aes(x = Host, y = Latency, fill = Metric)) +
geom_bar(stat = "identity", position = position_dodge()) +
scale_fill_manual(values = manu_cols) +
labs(title = "Latency Comparison from fping Test",
x = "Host",
y = "Latency (ms)") +
theme_minimal()
# Create the latency dataframe
latency_df <- data.frame(
Host = c("gpu-0", "compute-0", "compute-1", "compute-2", "compute-3", "compute-4",
"hugemem-0", "hugemem-1", "10.1.112.20", "10.1.112.21"),
Transmitted = c(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000),
Received = c(1000, 1000, 998, 1000, 1000, 1000, 1000, 1000, 1000, 1000),
LossPercent = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
MinLatency = c(0.07, 0.08, 0.06, 0.07, 0.08, 0.09, 0.12, 0.14, 0.01, 0.11),
AvgLatency = c(0.08, 0.17, 0.08, 0.09, 0.15, 0.11, 0.19, 0.23, 0.01, 0.15),
MaxLatency = c(1.90, 0.76, 0.96, 0.78, 1.03, 0.81, 0.70, 0.72, 0.07, 1.82)
)
# Plot using ggplot2 and Manu colours
ggplot(latency_df, aes(x = Host, y = Latency, fill = Metric)) +
geom_bar(stat = "identity", position = position_dodge()) +
scale_fill_manual(values = manu_cols) +
labs(title = "Latency Comparison from fping Test",
x = "Host",
y = "Latency (ms)") +
theme_minimal()
